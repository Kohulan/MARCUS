# =============================================================================
# MARCUS Environment Configuration Example
# =============================================================================
# Copy this file to .env and fill in your actual values
# This file shows all available environment variables for the MARCUS application

# =============================================================================
# OpenAI Configuration (Required for AI features)
# =============================================================================
# Your OpenAI API key - get it from https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# OpenAI model ID to use (can be a fine-tuned model ID or standard model)
# Examples: gpt-4, gpt-3.5-turbo, or your custom fine-tuned model ID
OPENAI_MODEL_ID=gpt-4

# =============================================================================
# Application Configuration
# =============================================================================
# Version of the application (used in API documentation)
RELEASE_VERSION=1.0

# Homepage URL for redirects (relative to domain root)
HOMEPAGE_URL=/latest/docs

# =============================================================================
# Session Management Configuration
# =============================================================================
# Maximum number of concurrent users allowed in the system
# Helps manage server resources and prevent overload
MARCUS_MAX_CONCURRENT_USERS=3

# Session timeout in seconds (how long a session stays active without activity)
# Default: 3600 seconds = 1 hour
MARCUS_SESSION_TIMEOUT=3600

# WebSocket heartbeat interval in seconds (for real-time session updates)
# Default: 30 seconds
MARCUS_HEARTBEAT_INTERVAL=30

# Enable or disable session management entirely
# Set to false to disable session limits and queue management
MARCUS_ENABLE_SESSION_MANAGEMENT=true

# Enable debug logging for session management (for development)
# Set to true to see detailed session management logs
MARCUS_SESSION_DEBUG=false

# =============================================================================
# Frontend Configuration
# =============================================================================
# Backend URL that the frontend should connect to
# For development: http://localhost:9000
# For production: adjust according to your deployment setup
VUE_APP_BACKEND_URL=http://localhost:9000

# API URL for frontend services (alternative to VUE_APP_BACKEND_URL)
# Used by some frontend services for API calls
VUE_APP_API_URL=http://localhost:9000/latest

# Enable mock data for development (optional)
# Set to true to use mock data instead of real API calls during development
VUE_APP_USE_MOCK_DATA=false

# =============================================================================
# Docker/Deployment Configuration
# =============================================================================
# Target platform for Docker builds (usually set by Docker automatically)
TARGETPLATFORM=linux/amd64

# =============================================================================
# Additional Notes
# =============================================================================
# 
# Required Variables:
# - OPENAI_API_KEY: Must be set for AI features to work
# - OPENAI_MODEL_ID: Must be set to specify which model to use
#
# Development Setup:
# - Use VUE_APP_BACKEND_URL=http://localhost:9000 for local development
# - Set MARCUS_SESSION_DEBUG=true for detailed session logs
# - Consider increasing MARCUS_MAX_CONCURRENT_USERS for development testing
#
# Production Setup:
# - Adjust VUE_APP_BACKEND_URL to match your production backend URL
# - Set appropriate MARCUS_SESSION_TIMEOUT based on your use case
# - Ensure MARCUS_ENABLE_SESSION_MANAGEMENT=true for proper resource management
# - Set MARCUS_SESSION_DEBUG=false for production
#
# Session Management:
# - MARCUS_MAX_CONCURRENT_USERS controls how many users can use the system simultaneously
# - Users exceeding this limit will be placed in a waiting queue
# - MARCUS_SESSION_TIMEOUT determines how long inactive sessions persist
# - Adjust these values based on your server capacity and expected usage
#
